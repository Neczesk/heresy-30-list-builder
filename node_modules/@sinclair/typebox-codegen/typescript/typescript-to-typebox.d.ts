import * as Ts from 'typescript';
export declare class TypeScriptToTypeBoxError extends Error {
    readonly diagnostics: Ts.Diagnostic[];
    constructor(diagnostics: Ts.Diagnostic[]);
}
export interface TypeScriptToTypeBoxOptions {
    /**
     * Setting this to true will ensure all types are exports as const values. This setting is
     * used by the TypeScriptToTypeBoxModel to gather TypeBox definitions during runtime eval
     * pass. The default is false
     */
    useExportEverything?: boolean;
    /**
     * Specifies if the output code should specify a default `import` statement. For TypeScript
     * generated code this is typically desirable, but for Model generated code, the `Type`
     * build is passed in into scope as a variable. The default is true.
     */
    useTypeBoxImport?: boolean;
    /**
     * Specifies if the output types should include an identifier associated with the assigned
     * variable name. This is useful for remapping model types to targets, but optional for
     * for TypeBox which can operate on vanilla JS references. The default is false.
     */
    useIdentifiers?: boolean;
}
/** Generates TypeBox types from TypeScript code */
export declare namespace TypeScriptToTypeBox {
    /** Generates TypeBox types from TypeScript interface and type definitions */
    function Generate(typescriptCode: string, options?: TypeScriptToTypeBoxOptions): string;
}
